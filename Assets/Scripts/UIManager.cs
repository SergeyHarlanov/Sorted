// –§–∞–π–ª: UIManager.cs
using UnityEngine;
using TMPro; // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ TextMeshPro –¥–ª—è UI
using Zenject; // –î–æ–±–∞–≤–ª—è–µ–º using Zenject

public class UIManager : MonoBehaviour
{
    [Header("UI –≠–ª–µ–º–µ–Ω—Ç—ã")]
    [SerializeField] private TextMeshProUGUI scoreText;
    [SerializeField] private TextMeshProUGUI livesText;
    [SerializeField] private TextMeshProUGUI winGoalText; // –ù–æ–≤—ã–π TextMeshPro –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–ª–∏ –ø–æ–±–µ–¥—ã

    private GameManager _gameManager; // –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º GameManager

    // Zenject –∏–Ω–∂–µ–∫—Ç–∏—Ä—É–µ—Ç GameManager
    [Inject]
    public void Construct(GameManager gameManager)
    {
        _gameManager = gameManager;
        Debug.Log("GameManager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –≤ UIManager.");
        
        if (_gameManager == null)
        {
            Debug.LogError("GameManager –Ω–µ –±—ã–ª –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –≤ UIManager. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GameInstaller.");
            enabled = false;
            return;
        }

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è GameManager –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        _gameManager.OnScoreChanged += UpdateScoreUI;
        _gameManager.OnLivesChanged += UpdateLivesUI;
        _gameManager.OnGameOver += OnGameOverUI; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ–±—Ä–∞–±–æ—Ç–∫–∞ Game Over –≤ UI
        _gameManager.OnGameWin += OnGameWinUI;   // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ–±—Ä–∞–±–æ—Ç–∫–∞ Win –≤ UI

        // üî• –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–≥—É—Ä –¥–ª—è –ø–æ–±–µ–¥—ã –∏–∑ GameManager üî•
        if (winGoalText != null)
        {
            winGoalText.text = $"–¶–µ–ª—å: {_gameManager.FiguresRequiredToWin}";
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (–æ–Ω–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ GameManager.PostConstruct)
        UpdateScoreUI(_gameManager.CurrentScore);
        UpdateLivesUI(_gameManager.CurrentLives);
    }

    private void OnDestroy()
    {
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏ –∏ –æ—à–∏–±–æ–∫
        if (_gameManager != null)
        {
            _gameManager.OnScoreChanged -= UpdateScoreUI;
            _gameManager.OnLivesChanged -= UpdateLivesUI;
            _gameManager.OnGameOver -= OnGameOverUI;
            _gameManager.OnGameWin -= OnGameWinUI;
        }
    }

    private void UpdateScoreUI(int newScore)
    {
        if (scoreText != null)
        {
            scoreText.text = $"–û—á–∫–∏: {newScore}";
        }
    }

    private void UpdateLivesUI(int newLives)
    {
        if (livesText != null)
        {
            livesText.text = $"–ñ–∏–∑–Ω–∏: {newLives}";
        }
    }

    private void OnGameOverUI(int finalScore)
    {
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å "Game Over"
        Debug.Log($"UI: –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ —Å –æ—á–∫–∞–º–∏: {finalScore}");
    }

    private void OnGameWinUI(int finalScore)
    {
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å "–í—ã –ø–æ–±–µ–¥–∏–ª–∏!"
        Debug.Log($"UI: –í—ã –ø–æ–±–µ–¥–∏–ª–∏ —Å –æ—á–∫–∞–º–∏: {finalScore}");
    }
}